import os
from app import app, db
from config import basedir

class Seed(db.Model):
    """Seed is an SQLAlchemy db model for handling seed product data.
    
    Data Attributes:
        id -- Unique numerical ID generated by database.
        name -- Name as we want it to appear on the product page.
        genus -- Genus of seed.
        species -- Species of seed.
        description -- Product description.
        synonyms -- Other names the seed is called.
        series -- Series seed belongs to, if any. (Ex: Benary's Giant)
        variety -- Variety of seed. (Ex: zinnia, coleus, sunflower)
        category -- Type of plant. (Ex: annual flower, herb, vegetable)
        price -- Current price of the seed.
        is_active -- Whether or not the seed is to be restocked.
        in_stock -- Whether or not the seed is in stock.
        thumbnail -- Filename of thumbnail image.

    """

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(64), unique=True)
    genus = db.Column(db.String(64))
    species = db.Column(db.String(64))
    description = db.Column(db.String(64))
    synonyms = db.relationship('Synonym',
                               backref='seed',
                               lazy='dynamic',
                               cascade='all, merge, delete, delete-orphan')
    series = db.Column(db.String(32))
    variety = db.Column(db.String(32))
    category = db.Column(db.String(32))
    price = db.Column(db.Float)
    is_active = db.Column(db.Boolean)
    in_stock = db.Column(db.Boolean)
    thumbnail = db.Column(db.String(64))
    
    def __init__(self,
                 name,
                 binomen,
                 description,
                 variety,
                 category,
                 price,
                 is_active,
                 in_stock,
                 thumbnail=None,
                 synonyms=None,
                 series=None):
        self.name = name
        self.set_binomen(binomen)
        self.description = description
        self.variety = variety
        self.category = category
        self.price = price
        self.is_active = is_active
        self.in_stock = in_stock
        self.thumbnail = thumbnail
        self.add_synonyms_from_string(synonyms)
        self.series = series

    def add_synonym(self, synonym):
        """Adds a synonym linked to our seed object."""
        self.synonyms.append(Synonym(synonym))

    def add_synonyms_from_list(self, synonyms):
        """Adds synonyms from a list."""
        for synonym in synonyms:
            self.add_synonym(synonym)

    def add_synonyms_from_string(self, synonyms):
        self.add_synonyms_from_list(string_to_list(synonyms))

    def get_synonyms_list(self):
        """Returns a list of synonyms."""
        synonyms = []
        for synonym in self.synonyms.all():
            synonyms.append(synonym.name)
        return synonyms

    def get_synonyms_string(self):
        """Returns a string containing list of synonyms."""
        return list_to_string(self.get_synonyms_list())

    def set_binomen(self, binomen):
        """Sets genus and species from a binomen string."""
        genspec = [nomen.strip() for nomen in binomen.split(' ')]
        self.genus = genspec[0].lower().capitalize()
        self.species = genspec[1].lower()

    def get_images_directory(self):
        """Returns the path to this seed's image files."""
        return os.path.join(
            app.config['IMAGES_FOLDER'],
            self.variety.lower(),
            self.name.lower()
        )


    def create_images_directory(self):
        """Creates this seed's images directory if not present."""
        try:
            os.makedirs(self.get_images_directory())
        except OSError as error:
            if (error.errorno == os.errorno.EEXIST and
                    os.path.isdir(self.get_images_directory())):
                pass
            else:
                raise

    def save_image(self, image):
        """Saves an image to this seed's images directory."""
        fullpath = os.path.join(self.get_images_directory(), image.filename)
        self.create_images_directory()
        image.save(fullpath)


class Synonym(db.Model):
    """A synonym for a seed.

    Data Attributes:
        id -- Unique ID for database
        name -- The synonym itself.
        seed_id -- The ID of the parent seed.
    """
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(64))
    seed_id = db.Column(db.Integer, db.ForeignKey('seed.id'))

    def __init__(self, name):
        self.name = name



def string_to_list(stringlist):
    """Splits a string by its commas and returns a list."""
    return [item.strip() for item in stringlist.split(',')]

def list_to_string(listobj):
    """Returns a list as a string w/ commas."""
    return ', '.join(listobj)

