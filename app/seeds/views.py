# This file is part of SGS-Flask.

# SGS-Flask is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# SGS-Flask is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Copyright Swallowtail Garden Seeds, Inc


import datetime

from flask import (
    abort,
    current_app,
    flash,
    jsonify,
    redirect,
    render_template,
    request,
    url_for
)
from flask_login import login_required

from app import db, format_ship_date, list_to_english, Permission
from app.breadcrumbs import Crumbler
from app.decorators import permission_required
from app.pending import Pending
from app.redirects import Redirect, RedirectsFile
from . import seeds
from ..lastcommit import LastCommit
from app.db_helpers import dbify
from .models import (
    Section,
    CommonName,
    Cultivar,
    Image,
    Index,
    Packet,
    USDollar
)
from app.seeds.forms import (
    AddIndexForm,
    AddCommonNameForm,
    AddPacketForm,
    AddRedirectForm,
    AddCultivarForm,
    AddSectionForm,
    EditIndexForm,
    EditCommonNameForm,
    EditPacketForm,
    EditCultivarForm,
    EditSectionForm,
    EditShipDateForm,
    RemoveIndexForm,
    RemoveCommonNameForm,
    RemovePacketForm,
    RemoveSectionForm,
    RemoveCultivarForm,
    SelectIndexForm,
    SelectCommonNameForm,
    SelectPacketForm,
    SelectCultivarForm,
    SelectSectionForm
)

cblr = Crumbler('seeds')


ADD_ROUTES = (
    ('manage', 'Manage Seeds'),
    'add_index',
    'add_common_name',
    'add_section',
    'add_cultivar',
    'add_packet'
)


EDIT_ROUTES = (
    ('manage', 'Manage Seeds'),
    'edit_index',
    'edit_common_name',
    'edit_section',
    'edit_cultivar',
    'edit_packet'
)


REMOVE_ROUTES = (
    ('manage', 'Manage Seeds'),
    'remove_index',
    'remove_common_name',
    'remove_section',
    'remove_cultivar',
    'remove_packet'
)


class NotEnabledError(RuntimeError):
    """Exception for trying to run a disabled feature.

    Attributes:
        message: The message to display when the error is raised.
    """
    def __init__(self, message):
        self.message = message


def flash_all(messages, category='message'):
    if category == 'message':
        if len(messages) > 2:
            start = messages.pop(0)
            end = messages.pop()
            start = '<span>{}</span>'.format(start)
            end = '<span>{}</span>'.format(end)
            msgs = ['  <li>{}</li>'.format(m) for m in messages]
            msgs.insert(0, start)
            msgs.insert(1, '<ul class="flashed_list">')
            msgs.append('</ul>')
            msgs.append(end)
            flash('\n'.join(msgs), category)
        else:
            for message in messages:
                flash(message, category)
    else:
        for message in messages:
            flash(message, category)


def redirect_warning(old_path, links):
    """Generate a message warning that a redirect should be created.

    Args:
        old_path: The path that has been rendered invalid.
        links: A link or links to forms to add possible redirects.

    Returns:
        Markup: A string containing a warning that a redirect should be added.
    """
    return ('Warning: the path "{0}" is no longer valid. You may wish to '
            'redirect it to {1}.'.format(old_path, links))


def redirect_index_warnings(index,
                            old_idx_slug=None,
                            new_idx_slug=None):
    """Generate redirect warnings for a changed `Index`.

    Args:
        index: The `Index` being redirected from.
        old_idx_slug: Optional `Index.slug` to redirect from.
        new_idx_slug: Optional `Index.slug` to redirect to.

    Raises:
        ValueError: If no slugs were passed.

    Returns:
        list: A list of redirect warnings generated by this function.
    """
    if not old_idx_slug and new_idx_slug:
        raise ValueError('At least one slug must be passed!')

    if not old_idx_slug:
        old_idx_slug = index.slug

    if not new_idx_slug:
        new_idx_slug = index.slug

    old_path = url_for('seeds.index', idx_slug=old_idx_slug)
    new_path = url_for('seeds.index', idx_slug=new_idx_slug)

    warnings = []
    if index.common_names:
        for cn in index.common_names:
            try:
                warnings += redirect_common_name_warnings(
                    common_name=cn,
                    old_idx_slug=old_idx_slug,
                    new_idx_slug=new_idx_slug
                )
            except ValueError:
                pass
    warnings.append(redirect_warning(
        old_path,
        '<a href="{0}" target="_blank">{1}</a>'
        .format(url_for('seeds.add_redirect',
                        old_path=old_path,
                        new_path=new_path,
                        status_code=301),
                new_path)
    ))
    return warnings


def redirect_common_name_warnings(common_name,
                                  old_idx_slug=None,
                                  old_cn_slug=None,
                                  new_idx_slug=None,
                                  new_cn_slug=None):
    """Generate redirect warnings for a changed `CommonName`.

    All slugs are optional, and any not passed will be set to the relevant
    slug belonging to `common_name`. At least one slug should be passed,
    though, otherwise there is no need to make a redirect.

    Args:
        common_name: The `CommonName` being redirected from.
        old_idx_slug: Optional `Index.slug` to redirect from.
        old_cn_slug: Optional `CommonName.slug` to redirect from.
        new_idx_slug: Optional `Index.slug` to redirect to.
        new_cn_slug: Optional `CommonName.slug` to redirect to.

    Raises:
        ValueError: If no slugs were passed.

    Returns:
        list: A list of redirect warnings generated by this function.
    """
    if (not old_idx_slug and not old_cn_slug and
            not new_idx_slug and not new_cn_slug):
        raise ValueError('At least one slug must be passed!')

    if not old_idx_slug:
        old_idx_slug = common_name.index.slug
    if not old_cn_slug:
        old_cn_slug = common_name.slug

    if not new_idx_slug:
        new_idx_slug = common_name.index.slug
    if not new_cn_slug:
        new_cn_slug = common_name.slug

    old_path = url_for('seeds.common_name',
                       idx_slug=old_idx_slug,
                       cn_slug=old_cn_slug)
    new_path = url_for('seeds.common_name',
                       idx_slug=new_idx_slug,
                       cn_slug=new_cn_slug)

    warnings = []
    if common_name.cultivars:
        for cv in common_name.cultivars:
            try:
                warnings.append(redirect_cultivar_warning(
                    cultivar=cv,
                    old_idx_slug=old_idx_slug,
                    old_cn_slug=old_cn_slug,
                    new_idx_slug=new_idx_slug,
                    new_cn_slug=new_cn_slug
                ))
            except NotEnabledError:
                pass
    warnings.append(redirect_warning(
        old_path,
        '<a href="{0}" target="_blank">{1}</a>'
        .format(url_for('seeds.add_redirect',
                        old_path=old_path,
                        new_path=new_path,
                        status_code=301),
                new_path)
    ))
    return warnings


def redirect_cultivar_warning(cultivar,
                              old_idx_slug=None,
                              old_cn_slug=None,
                              old_cv_slug=None,
                              new_idx_slug=None,
                              new_cn_slug=None,
                              new_cv_slug=None):
    """Generate a redirect warning for a cultivar.

    All slugs are optional, and any not passed will be set to the relevant
    slug belinging to `cultivar`. At least one slug should be passed, though,
    otherwise there is no need to make a redirect.

    Args:
        cultivar: The `Cultivar` being redirected from.
        old_idx_slug: Optional `Index.slug` to redirect from.
        old_cn_slug: Optional `CommonName.slug` to redirect from.
        old_cv_slug: Optional `Cultivar.slug` to redirect from.
        new_idx_slug: Optional `Index.slug` to redirect to.
        new_cn_slug: Optional `CommonName.slug` to redirect to.
        new_cv_slug: Optional `Cultivar.slug` to redirect to.

    Raises:
        ValueError: If no slugs were passed.
        NotEnabledError: If ``SHOW_CULTIVAR_PAGES`` is not enabled in config.

    Returns:
        str: The redirect warning message.
    """
    if not current_app.config.get('SHOW_CULTIVAR_PAGES'):
        raise NotEnabledError('This function cannot be run without '
                              'SHOW_CULTIVAR_PAGES enabled in config!')
    if (not old_idx_slug and not old_cn_slug and not old_cv_slug and
            not new_idx_slug and not new_cn_slug and not new_cv_slug):
        raise ValueError('At least one slug must be passed!')

    if not old_idx_slug:
        old_idx_slug = cultivar.common_name.index.slug
    if not old_cn_slug:
        old_cn_slug = cultivar.common_name.slug
    if not old_cv_slug:
        old_cv_slug = cultivar.slug

    if not new_idx_slug:
        new_idx_slug = cultivar.common_name.index.slug
    if not new_cn_slug:
        new_cn_slug = cultivar.common_name.slug
    if not new_cv_slug:
        new_cv_slug = cultivar.slug

    old_path = url_for('seeds.cultivar',
                       idx_slug=old_idx_slug,
                       cn_slug=old_cn_slug,
                       cv_slug=old_cv_slug)
    new_path = url_for('seeds.cultivar',
                       idx_slug=new_idx_slug,
                       cn_slug=new_cn_slug,
                       cv_slug=new_cv_slug)
    return redirect_warning(
        old_path,
        '<a href="{0}" target="_blank">{1}</a>'
        .format(url_for('seeds.add_redirect',
                        old_path=old_path,
                        new_path=new_path,
                        status_code=301),
                new_path)
    )


# Image functions
def relative_to_static(filename):
    """Return filename with path to static removed."""
    return filename.replace(
        current_app.config.get('STATIC_FOLDER'), ''
    ).strip('/')


def add_thumbnail(field, obj, messages):
    """Add a thumbnail to the given object.

    Args:
        field: The FileField to get image from.
        messages: The list to append messages to.
    """
    obj.thumbnail = Image.from_form_field(field)
    messages.append('Thumbnail uploaded as: "{0}".'
                    .format(obj.thumbnail.filename))


def upload_image(file_field, file_path):
    """Upload an image from a form and return an Image instance."""
    try:
        file_path.parent.mkdir(parents=True)
    except FileExistsError:
        pass
    file_field.data.save(str(file_path))
    return Image.get_or_create(relative_to_static(str(file_path)))


def edit_thumbnail(field, obj, messages):
    """Edit a thumbnail based on a new upload.

    Args:
        field: The FileField the new thumbnail is uploaded with.
        obj: The object with the thumbnail to edit.
        messages: The list to append messages to.
    """
    if obj.thumbnail and field.data.filename == obj.thumbnail.filename:
        obj.thumbnail.save_form_field_image(field)
        messages.append('New thumbnail has same filename as old, so old file '
                        'been replaced.')
    else:
        if obj.thumbnail:
            old = obj.thumbnail
            obj.thumbnail = None
            if hasattr(obj, 'images'):
                obj.images.append(old)
                messages.append('Old thumbnail "{0}" moved to images.'
                                .format(old.filename))
            else:
                messages.append('Old thumbnail "{0}" was deleted.'
                                .format(old.filename))
                db.session.delete(old)
            obj.thumbnail = Image.from_form_field(field)
            messages.append('Uploading new thumbnail as "{0}".'
                            .format(obj.thumbnail.filename))


# Routes
@seeds.route('/_dbify')
def _dbify():
    text = request.args.get('text', '', type=str)
    print(text)
    return jsonify(result=dbify(text))


@seeds.route('/')
def home():
    """Home page."""
    return render_template('seeds/home.html')


@seeds.route('/<page>.html')
def static_html(page):
    """Display a page generated from html files in app/static/html"""
    try:
        return render_template('static/' + page + '.html', page=page)
    except TemplateNotFound:
        abort(404)


@seeds.route('/add_index', methods=['GET', 'POST'])
@login_required
@permission_required(Permission.MANAGE_SEEDS)
def add_index():
    """Handle web interface for adding Index objects to the database."""
    form = AddIndexForm()
    if form.validate_on_submit():
        messages = []
        index = Index(name=form.name.data)
        db.session.add(index)
        messages.append('Creating new index "{0}":'
                        .format(index.name))
        if form.thumbnail.data:
            index.thumbnail = upload_image(
                form.thumbnail,
                form.thumbnail_path
            )
            messages.append(
                'Thumbnail uploaded as "{}".'
                .format(form.thumbnail_path)
            )
        if form.description.data:
            index.description = form.description.data
            messages.append('Description set to: <p>{0}</p>'
                            .format(index.description))
        if form.pos.data is -1:
            index.set_position(1)
            messages.append('Will be listed before other indexes.')
        else:
            other = Index.query.get(form.pos.data)
            if other.position is None:
                other.auto_position()
            index.set_position(other.position + 1)
            messages.append('Will be listed after "{0}"'.format(other.name))
        db.session.commit()
        messages.append('New index "{0}" added to the database.'
                        .format(index.name))
        flash_all(messages)
        return redirect(url_for('seeds.add_common_name', idx_id=index.id))
    crumbs = cblr.crumble_route_group('add_index', ADD_ROUTES)
    return render_template('seeds/add_index.html', crumbs=crumbs, form=form)


@seeds.route('/add_common_name', methods=['GET', 'POST'])
@seeds.route('/add_common_name/<int:idx_id>', methods=['GET', 'POST'])
@login_required
@permission_required(Permission.MANAGE_SEEDS)
def add_common_name(idx_id=None):
    """Handle web interface for adding CommonName objects to the database."""
    idx = Index.query.get(idx_id) if idx_id else None
    if not idx:
        return redirect(url_for('seeds.select_index',
                                dest='seeds.add_common_name'))

    form = AddCommonNameForm(index=idx)
    if form.validate_on_submit():
        messages = []
        cn = CommonName(name=form.name.data)
        db.session.add(cn)
        messages.append('Creating new common name "{0}" and adding it to '
                        'index "{1}":'.format(cn.name, idx.name))
        if form.subtitle.data:
            cn.subtitle = form.subtitle.data
            messages.append('Subtitle set to: <p>{}</p>'.format(cn.subtitle))
        if form.list_as.data:
            cn.list_as = form.list_as.data
            messages.append('Will be listed as: <p>{}</p>'.format(cn.list_as))
        if form.thumbnail.data:
            add_thumbnail(form.thumbnail, cn, messages)
        if form.botanical_names.data:
            cn.botanical_names = form.botanical_names.data
            messages.append(
                'Botanical names set to: <p>{}</p>'.format(cn.botanical_names)
            )
        if form.sunlight.data:
            cn.sunlight = form.sunlight.data
            messages.append(
                'Sunlight set to: <p>{}</p>'.format(cn.sunlight)
            )
        if form.description.data:
            cn.description = form.description.data
            messages.append('Description set to: <p>{0}</p>'
                            .format(cn.description))
        if form.instructions.data:
            cn.instructions = form.instructions.data
            messages.append('Planting instructions set to: <p>{0}</p>'
                            .format(cn.instructions))
        if form.pos.data == -1:
            idx.common_names.insert(0, cn)
            messages.append('Will be listed before other common names.')
        else:
            after = CommonName.query.get(form.pos.data)
            idx.common_names.insert(idx.common_names.index(after) + 1, cn)
            messages.append('Will be listed after "{0}".'
                            .format(after.name))
        if form.gw_common_names_ids.data:
            cn.gw_common_names = CommonName.from_ids(
                form.gw_common_names_ids.data
            )
            messages.append(
                'Grows with common names: {}.'
                .format(list_to_english(c.name for c in cn.gw_common_names))
            )
        if form.gw_cultivars_ids.data:
            cn.gw_cultivars = Cultivar.from_ids(
                form.gw_cultivars_ids.data
            )
            messages.append(
                'Grows with cultivars: {}.'
                .format(list_to_english(c.fullname for c in cn.gw_cultivars))
            )
        if form.gw_sections_ids.data:
            cn.gw_sections = Section.from_ids(form.gw_sections_ids.data)
            messages.append(
                'Grows with sections: {}.'
                .format(list_to_english(s.fullname for s in cn.gw_sections))
            )
        if form.visible.data:
            cn.visible = True
            messages.append('"{0}" is visible on auto-generated pages.'
                            .format(cn.name))
        else:
            cn.visible = False
            messages.append('"{0}" is not visible on auto-generated pages.'
                            .format(cn.name))
        db.session.commit()
        messages.append('New common name "{0}" added to the database.'
                        .format(cn.name))
        flash_all(messages)
        return redirect(url_for('seeds.{0}'.format(form.next_page.data),
                                cn_id=cn.id))
    crumbs = cblr.crumble_route_group('add_common_name', ADD_ROUTES)
    return render_template('seeds/add_common_name.html',
                           crumbs=crumbs,
                           form=form)


@seeds.route('/add_section', methods=['GET', 'POST'])
@seeds.route('/add_section/<int:cn_id>', methods=['GET', 'POST'])
@login_required
@permission_required(Permission.MANAGE_SEEDS)
def add_section(cn_id=None):
    """Add a section to the database."""
    cn = CommonName.query.get(cn_id) if cn_id else None
    if not cn:
        return redirect(url_for('seeds.select_common_name',
                                dest='seeds.add_section'))

    form = AddSectionForm(cn=cn)
    if form.validate_on_submit():
        messages = []
        section = Section(name=form.name.data)
        db.session.add(section)
        messages.append('Creating section "{0}" for common name "{1}":'
                        .format(section.name, cn.name))
        if form.parent.data:
            parent = next(s for s in cn.sections if s.id == form.parent.data)
            parent.children.insert(len(parent.children), section)
            messages.append('Will be a subsection of: "{0}"'
                            .format(parent.name))
        if form.subtitle.data:
            section.subtitle = form.subtitle.data
            messages.append('Subtitle set to: "{0}"'
                            .format(section.subtitle))
        if form.description.data:
            section.description = form.description.data
            messages.append('Description set to: <p>{0}</p>.'
                            .format(section.description))
        if form.pos.data == -1:
            cn.sections.insert(0, section)
            messages.append('Will be listed before other sections in "{0}".'
                            .format(cn.name))
        else:
            after = Section.query.get(form.pos.data)
            cn.sections.insert(cn.sections.index(after) + 1, section)
            messages.append('Will be listed after "{0}" in "{1}".'
                            .format(after.name, cn.name))
        db.session.commit()
        messages.append('New section "{0}" added to the database.'
                        .format(section.fullname))
        flash_all(messages)
        return redirect(url_for('seeds.add_cultivar', cn_id=cn.id))
    crumbs = cblr.crumble_route_group('add_section', ADD_ROUTES)
    return render_template('seeds/add_section.html',
                           crumbs=crumbs,
                           form=form)


@seeds.route('/add_cultivar', methods=['GET', 'POST'])
@seeds.route('/add_cultivar/<int:cn_id>', methods=['GET', 'POST'])
@login_required
@permission_required(Permission.MANAGE_SEEDS)
def add_cultivar(cn_id=None):
    """Add a cultivar to the database."""
    cn = CommonName.query.get(cn_id) if cn_id else None
    if not cn:
        return redirect(url_for('seeds.select_common_name',
                                dest='seeds.add_cultivar'))

    form = AddCultivarForm(cn=cn)
    if form.validate_on_submit():
        messages = []
        cv = Cultivar(name=form.name.data, common_name=cn)
        db.session.add(cv)
        messages.append('Creating cultivar with short name "{0}" for common '
                        'name "{1}":'.format(cv.name, cn.name))
        if form.subtitle.data:
            cv.subtitle = form.subtitle.data
            messages.append('Subtitle set to: "{0}"'.format(cv.subtitle))
        if form.botanical_name.data:
            cv.botanical_name = form.botanical_name.data
            messages.append('Botanical name set to: "{0}".'
                            .format(cv.botanical_name))
        if form.section.data:
            sec = Section.query.get(form.section.data)
            cv.sections = [sec]
            messages.append('Section set to: "{0}".'
                            .format(sec.name))
        if form.organic.data:
            cv.organic = True
            messages.append('Set as organic.')
        else:
            cv.organic = False
        if form.taxable.data:
            cv.taxable = True
            messages.append('Set as taxable in California.')
        else:
            cv.taxable = False
        if form.thumbnail.data:
            add_thumbnail(form.thumbnail, cv, messages)
        if form.description.data:
            cv.description = form.description.data
            messages.append('Description set to: <p>{0}</p>'
                            .format(cv.description))
        if not cv.sections:
            try:
                cn.child_cultivars.remove(cv)
            except ValueError:
                pass
            if form.pos.data == -1:
                cn.child_cultivars.insert(0, cv)
                messages.append(
                    'Will be listed before other individual cultivars '
                    'belonging to "{0}".'.format(cn.name)
                )
            else:
                after = Cultivar.query.get(form.pos.data)
                cv.insert_after(after)
                messages.append(
                    'Will be listed after "{0}".'.format(after.fullname)
                )
        if form.synonyms.data:
            cv.synonyms_string = form.synonyms.data
            messages.append('Synonyms set to: "{0}".'
                            .format(cv.synonyms_string))
        if form.gw_common_names_ids.data:
            cv.gw_common_names = CommonName.from_ids(
                form.gw_common_names_ids.data
            )
            messages.append(
                'Grows with common names: {}.'
                .format(list_to_english(c.name for c in cv.gw_common_names))
            )
        if form.gw_cultivars_ids.data:
            cv.gw_cultivars = Cultivar.from_ids(
                form.gw_cultivars_ids.data
            )
            messages.append(
                'Grows with cultivars: {}.'
                .format(list_to_english(c.fullname for c in cv.gw_cultivars))
            )
        if form.gw_sections_ids.data:
            cv.gw_sections = Section.from_ids(form.gw_sections_ids.data)
            messages.append(
                'Grows with sections/series: {}.'
                .format(list_to_english(s.fullname for s in cv.gw_sections))
            )
        if form.new_until.data and form.new_until.data > datetime.date.today():
            cv.new_until = form.new_until.data
            messages.append('"{0}" will be marked as new until: {1}'
                            .format(cv.fullname,
                                    cv.new_until.strftime('%m/%d/%Y')))
        if form.featured.data:
            cv.featured = True
            messages.append('"{0}" will be featured on its common '
                            'name\'s page.'.format(cv.fullname))
        if form.in_stock.data:
            cv.in_stock = True
            messages.append('"{0}" is in stock.'.format(cv.fullname))
        else:
            cv.in_stock = False
            messages.append('"{0}" is not in stock.'.format(cv.fullname))
        if form.active.data:
            cv.active = True
            messages.append('"{0}" is currently active.'.format(cv.fullname))
        else:
            cv.active = False
            messages.append('"{0}" is currently inactive.'
                            .format(cv.fullname))
        if form.visible.data:
            cv.visible = True
            messages.append('"{0}" will be visible in auto-generated pages.'
                            .format(cv.fullname))
        else:
            cv.visible = False
            messages.append('"{0}" will not be visible in auto-generated '
                            'pages, but it can still be used in custom pages.'
                            .format(cv.fullname))
        db.session.commit()
        messages.append('New cultivar "{0}" added to the database.'
                        .format(cv.fullname))
        flash_all(messages)
        return redirect(url_for('seeds.add_packet', cv_id=cv.id))
    crumbs = cblr.crumble_route_group('add_cultivar', ADD_ROUTES)
    return render_template('seeds/add_cultivar.html',
                           crumbs=crumbs,
                           form=form)


@seeds.route('/add_packet', methods=['GET', 'POST'])
@seeds.route('/add_packet/<int:cv_id>', methods=['GET', 'POST'])
@login_required
@permission_required(Permission.MANAGE_SEEDS)
def add_packet(cv_id=None):
    """Add a packet to the database."""
    cv = Cultivar.query.get(cv_id) if cv_id else None
    if not cv:
        return redirect(url_for('seeds.select_cultivar',
                                dest='seeds.add_packet'))
    form = AddPacketForm(cultivar=cv)
    if form.validate_on_submit():
        messages = []
        packet = Packet(sku=form.sku.data.strip(), cultivar=cv)
        db.session.add(packet)
        messages.append('Creating packet with SKU #{0} for cultivar "{1}":'
                        .format(packet.sku, cv.fullname))
        packet.price = form.price.data
        messages.append('Price set to: ${0}.'.format(packet.price))
        #TODO: Amount
        db.session.commit()
        messages.append('New packet with SKU #{0} added to the database.'
                        .format(packet.sku))
        flash_all(messages)
        if form.again.data:
            return redirect(url_for('seeds.add_packet', cv_id=cv_id))
        else:
            return redirect(url_for('seeds.manage'))
    crumbs = cblr.crumble_route_group('add_packet', ADD_ROUTES)
    return render_template('seeds/add_packet.html',
                           crumbs=crumbs,
                           form=form)


@seeds.route('/add_redirect', methods=['GET', 'POST'])
@login_required
@permission_required(Permission.MANAGE_SEEDS)
def add_redirect():
    """Add a redirect from an old path to a new one."""
    op = request.args.get('old_path')
    np = request.args.get('new_path')
    sc = request.args.get('status_code')
    form = AddRedirectForm(old_path=op, new_path=np, status_code=sc)
    if form.validate_on_submit():
        rdf = RedirectsFile(current_app.config.get('REDIRECTS_FILE'))
        if rdf.exists():
            rdf.load()
        rd = Redirect(form.old_path.data,
                      form.new_path.data,
                      form.status_code.data)
        pending = Pending(current_app.config.get('PENDING_FILE'))
        if pending.exists():
            pending.load()
        pending.add_message(rd.message() + '<br>')
        rdf.add_redirect(rd)
        pending.save()
        rdf.save()
        flash('{0} added. It will take effect on next restart of Flask app.'
              .format(rd.message()))
        return redirect(url_for('seeds.manage'))
    crumbs = (cblr.crumble('manage', 'Manage Seeds'),
              cblr.crumble('add_redirect'))
    return render_template('seeds/add_redirect.html', crumbs=crumbs, form=form)


@seeds.route('/edit_index', methods=['GET', 'POST'])
@seeds.route('/edit_index/<int:idx_id>', methods=['GET', 'POST'])
@login_required
@permission_required(Permission.MANAGE_SEEDS)
def edit_index(idx_id=None):
    index = Index.query.get(idx_id) if idx_id else None
    if index is None:
        return redirect(url_for('seeds.select_index',
                        dest='seeds.edit_index'))

    form = EditIndexForm(obj=index)
    if form.validate_on_submit():
        edited = False
        messages = []
        old_slug = index.slug
        messages.append('Editing index "{0}":'.format(index.name))
        if form.name.data != index.name:
            edited = True
            index.name = form.name.data
            messages.append('Name changed to: "{0}".'.format(index.name))
        if form.thumbnail.data:
            edited = True
            if index.thumbnail and index.thumbnail.path == form.thumbnail_path:
                messages.append('Thumbnail file replaced.')
                form.thumbnail.data.save(str(index.thumbnail.path))
            else:
                index.thumbnail = upload_image(
                    form.thumbnail,
                    form.thumbnail_path
                )
                messages.append(
                    'New thumbnail saved as "{}".'.format(form.thumbnail_path)
                )
        elif form.thumbnail_folder.data != index.thumbnail.subfolder:
            edited = True
            index.thumbnail.subfolder = form.thumbnail_folder.data
            messages.append(
                'Thumbnail moved to "{}".'.format(index.thumbnail.path)
            )
        if form.description.data != index.description:
            if form.description.data:
                edited = True
                index.description = form.description.data
                messages.append('Description set to: <p>{0}</p>.'
                                .format(index.description))
            elif index.description is not None:
                edited = True
                index.description = None
                messages.append('Description cleared.')
        prev = index.previous
        if prev and form.pos.data == -1:  # Moving to first position.
            edited = True
            index.set_position(1)
            messages.append('Will be listed before all other indexes.')
        elif form.pos.data != -1 and (not prev or form.pos.data != prev.id):
            edited = True
            other = Index.query.get(form.pos.data)
            if not other.position:
                other.auto_position()
            index.set_position(other.position + 1)
            messages.append('Will be listed after "{0}".'.format(other.name))
        if edited:
            db.session.commit()
            messages.append('Changes to "{0}" committed to the database.'
                            .format(index.name))
            flash_all(messages)

            if old_slug != index.slug:
                warnings = None
                warnings = redirect_index_warnings(
                    index,
                    old_idx_slug=old_slug,
                    new_idx_slug=index.slug
                )
                if warnings:
                    flash_all(warnings, 'warning')

            return redirect(url_for('seeds.manage'))
        else:
            messages.append('No changes to "{0}" were made.'
                            .format(index.name))
            flash_all(messages)
            return redirect(url_for('seeds.edit_index', idx_id=idx_id))
    crumbs = cblr.crumble_route_group('edit_index', EDIT_ROUTES)
    return render_template('seeds/edit_index.html',
                           crumbs=crumbs,
                           form=form,
                           index=index)


@seeds.route('/edit_common_name', methods=['GET', 'POST'])
@seeds.route('/edit_common_name/<int:cn_id>', methods=['GET', 'POST'])
@login_required
@permission_required(Permission.MANAGE_SEEDS)
def edit_common_name(cn_id=None):
    """"Edit a common name stored in the database.

    Args:
        cn_id: The id number of the common name to edit.
    """
    cn = CommonName.query.get(cn_id) if cn_id else None
    if not cn:
        return redirect(url_for('seeds.select_common_name',
                                dest='seeds.edit_common_name'))
    form = EditCommonNameForm(obj=cn)
    dest = url_for('seeds.manage')
    if form.validate_on_submit():
        edited = False
        messages = []
        warnings = []
        old_slugs = {'cn': cn.slug, 'idx': cn.index.slug}
        idx = cn.index
        messages.append('Editing common name "{0}":'.format(cn.name))
        if form.index_id.data != cn.index.id:
            edited = True
            new_idx = Index.query.get(form.index_id.data)
            idx.common_names.remove(cn)
            # This will insert cn at the end of new_idx.common_names.
            # This is done instead of appending to ensure cn.idx_pos is set
            # correctly.
            new_idx.common_names.insert(len(new_idx.common_names), cn)
            messages.append('Index changed to: "{0}".'.format(cn.index.name))
        if form.name.data != cn.name:
            edited = True
            cn.name = form.name.data
            messages.append('Name changed to: "{0}".'.format(cn.name))
        if form.list_as.data != cn.list_as:
            edited = True
            cn.list_as = form.list_as.data
            messages.append('Will now be listed as: "{}".'.format(cn.list_as))
        if form.subtitle.data != cn.subtitle:
            edited = True
            cn.subtitle = form.subtitle.data
            messages.append('Subtitle changed to: "{}".'.format(cn.subtitle))
        if form.thumbnail.data:
            edited = True
            edit_thumbnail(form.thumbnail, cn, messages)
        if form.botanical_names.data != cn.botanical_names:
            edited = True
            cn.botanical_names = form.botanical_names.data
            messages.append('Botanical names changed to: "{}".'
                            .format(cn.botanical_names))
        if form.sunlight.data != cn.sunlight:
            edited = True
            cn.sunlight = form.sunlight.data
            messages.append('Sunlight changed to: "{}".'.format(cn.sunlight))
        if not form.description.data:
            form.description.data = None
        if form.description.data != cn.description:
            edited = True
            if form.description.data:
                cn.description = form.description.data
                messages.append('Description changed to: <p>{0}</p>'
                                .format(cn.description))
            else:
                cn.description = None
                messages.append('Description cleared.')
        if not form.instructions.data:
            form.instructions.data = None
        if form.instructions.data != cn.instructions:
            edited = True
            if form.instructions.data:
                cn.instructions = form.instructions.data
                messages.append('Planting instructions set to: <p>{0}</p>'
                                .format(cn.instructions))
            else:
                cn.instructions = None
                messages.append('Planting instructions cleared.')
        if idx is cn.index:
            cns = idx.common_names
            cn_index = cns.index(cn)
            if form.pos.data == -1 and cn_index != 0:
                edited = True
                cns.insert(0, cns.pop(cn_index))
                messages.append('Will now be listed first.')
            elif (form.pos.data != -1 and
                    (cn_index == 0 or form.pos.data != cns[cn_index - 1].id)):
                edited = True
                prev = next(c for c in cns if c.id == form.pos.data)
                cn.move_after(prev)
                messages.append('Will now be listed after "{0}".'
                                .format(prev.name))
        else:
            dest = url_for('seeds.edit_common_name', cn_id=cn.id)
            warnings.append(
                'Due to changing {0}\'s index to "{1}", it will be listed '
                'last under that index. You will need to edit it again if you '
                'want it in a different position.'
                .format(cn.name, cn.index.name)
            )
        if set(form.gw_common_names_ids.data) != set(cn.gw_common_names_ids):
            edited = True
            cn.gw_common_names = CommonName.from_ids(
                form.gw_common_names_ids.data
            )
            if cn.gw_common_names:
                messages.append(
                    'Grows with common names: {}.'
                    .format(
                        list_to_english(c.name for c in cn.gw_common_names)
                    )
                )
            else:
                messages.append('Grows with common names cleared.')
        if set(form.gw_sections_ids.data) != set(cn.gw_sections_ids):
            edited = True
            cn.gw_sections = Section.from_ids(form.gw_sections_ids.data)
            if cn.gw_sections:
                messages.append(
                    'Grows with sections/series: {}.'
                    .format(
                        list_to_english(s.fullname for s in cn.gw_sections)
                    )
                )
            else:
                messages.append('Grows with sections/series cleared.')
        if set(form.gw_cultivars_ids.data) != set(cn.gw_cultivars_ids):
            edited = True
            cn.gw_cultivars = Cultivar.from_ids(form.gw_cultivars_ids.data)
            if cn.gw_cultivars:
                messages.append(
                    'Grows with cultivars: {}.'
                    .format(
                        list_to_english(c.fullname for c in cn.gw_cultivars)
                    )
                )
            else:
                messages.append('Grows with cultivars cleared.')
        if edited:
            messages.append('Changes to "{0}" committed to the database.'
                            .format(cn.name))
            db.session.commit()
            flash_all(messages)

            if old_slugs['cn'] != cn.slug or old_slugs['idx'] != cn.index.slug:
                warnings += redirect_common_name_warnings(
                    cn,
                    old_idx_slug=old_slugs['idx'],
                    old_cn_slug=old_slugs['cn'],
                    new_idx_slug=cn.index.slug,
                    new_cn_slug=cn.slug
                )
                if warnings:
                    flash_all(warnings, 'warning')

            return redirect(dest)
        else:
            messages.append('No changes to "{0}" were made.'.format(cn.name))
            flash_all(messages)
            return redirect(url_for('seeds.edit_common_name', cn_id=cn.id))
    crumbs = cblr.crumble_route_group('edit_common_name', EDIT_ROUTES)
    return render_template('seeds/edit_common_name.html',
                           crumbs=crumbs,
                           form=form,
                           cn=cn)


@seeds.route('/edit_section', methods=['GET', 'POST'])
@seeds.route('/edit_section/<int:section_id>', methods=['GET', 'POST'])
@login_required
@permission_required(Permission.MANAGE_SEEDS)
def edit_section(section_id=None):
    """Display page for editing a Section from the database."""
    section = Section.query.get(section_id) if section_id else None
    if section is None:
        return redirect(url_for('seeds.select_section',
                                dest='seeds.edit_section'))
    form = EditSectionForm(obj=section)
    if form.validate_on_submit():
        edited = False
        messages = []
        messages.append('Editing section "{0}":'.format(section.name))
        old_cn = section.common_name
        if form.common_name_id.data != section.common_name.id:
            edited = True
            section.common_name = CommonName.query.get(
                form.common_name_id.data
            )
            messages.append('Common name changed to: "{0}".'
                            .format(section.common_name.name))
        old_parent = section.parent
        if form.parent_id.data == 0:
            form.parent_id.data = None
        if (old_cn is section.common_name and
                form.parent_id.data != section.parent_id):
            edited = True
            if form.parent_id.data:
                parent = next(
                    s for s in section.common_name.sections if
                    s.id == form.parent_id.data
                )
                parent.children.insert(len(parent.children), section)
                messages.append('Will now be a subcategory of: "{0}"'
                                .format(section.parent.name))
            else:
                section.parent = None
                messages.append('Will no longer be a subcategory.')
        old_name = section.name
        if form.name.data != section.name:
            edited = True
            section.name = form.name.data
            messages.append('Name changed to: "{0}"'.format(section.name))
        if not form.subtitle.data:
            form.subtitle.data = None
        if form.subtitle.data != section.subtitle:
            edited = True
            section.subtitle = form.subtitle.data
            if form.subtitle.data:
                messages.append('Subtitle changed to: "{0}"'
                                .format(section.subtitle))
            else:
                messages.append('Subtitle cleared. (Default will be used.)')
        if not form.description.data:
            form.description.data = None
        if form.description.data != section.description:
            edited = True
            if form.description.data:
                section.description = form.description.data
                messages.append('Description changed to: <p>{0}</p>'
                                .format(section.description))
            else:
                section.description = None
                messages.append('Description cleared.')
        if section.common_name is old_cn and section.parent is old_parent:
            secs = section.parent_collection
            s_index = secs.index(section)
            if form.pos.data == -1 and s_index != 0:
                edited = True
                secs.insert(0, secs.pop(s_index))
                messages.append(
                    'Will now be listed first in its parent container.'
                )
            elif (form.pos.data != -1 and
                    (s_index == 0 or form.pos.data != secs[s_index - 1].id)):
                edited = True
                prev = next(s for s in secs if s.id == form.pos.data)
                section.move_after(prev)
                messages.append('Will now be listed after "{0}"'
                                .format(prev.name))
        if old_cn is not section.common_name:
            for cv in section.cultivars:
                if cv.common_name is not section.common_name:
                    old_cvname = cv.fullname
                    cv.common_name = section.common_name
                    messages.append('Common name for the cultivar "{0}" has '
                                    'been changed to: "{1}".'
                                    .format(old_cvname, cv.common_name.name))
        if edited:
            db.session.commit()
            messages.append('Changes to "{0}" committed to the database.'
                            .format(section.name))
            flash_all(messages)

            if old_cn is not section.common_name or old_name != section.name:
                try:
                    warnings = []
                    for cv in section.cultivars:
                        warnings.append(redirect_cultivar_warning(
                            cv,
                            old_cv_slug=cv.slug,
                            old_cn_slug=old_cn.slug,
                            new_cv_slug=cv.generate_slug(),
                            new_cn_slug=section.common_name.slug
                        ))
                    if warnings:
                        flash_all(warnings)
                except NotEnabledError:
                    pass

            return redirect(url_for('seeds.manage'))
        else:
            messages.append('No changes to "{0}" were made.'
                            .format(section.name))
            flash_all(messages)
            return redirect(url_for('seeds.edit_section',
                                    section_id=section_id))
    crumbs = cblr.crumble_route_group('edit_section', EDIT_ROUTES)
    return render_template('seeds/edit_section.html',
                           crumbs=crumbs,
                           form=form,
                           section=section)


@seeds.route('/edit_cultivar', methods=['GET', 'POST'])
@seeds.route('/edit_cultivar/<int:cv_id>', methods=['GET', 'POST'])
@login_required
@permission_required(Permission.MANAGE_SEEDS)
def edit_cultivar(cv_id=None):
    """Edit a cultivar stored in the database."""
    cv = Cultivar.query.get(cv_id) if cv_id else None
    if cv is None:
        return redirect(url_for('seeds.select_cultivar',
                                dest='seeds.edit_cultivar'))
    form = EditCultivarForm(obj=cv)
    if form.validate_on_submit():
        edited = False
        messages = []
        warnings = []
        messages.append('Editing cultivar "{0}":'.format(cv.fullname))
        old_slugs = {'cv': cv.slug,
                     'cn': cv.common_name.slug,
                     'idx': cv.common_name.index.slug}
        old_cn = cv.common_name
        if form.common_name_id.data != cv.common_name_id:
            edited = True
            cv.common_name = CommonName.query.get(form.common_name_id.data)
            messages.append('Common name changed to: "{0}".'
                            .format(cv.common_name.name))
        old_parent_sec = cv.parent_section
        if not form.section_id.data:
            form.section_id.data = None
        if form.section_id.data != cv.section_id:
            edited = True
            if form.section_id.data:
                sec = Section.query.get(form.section_id.data)
                cv.sections = [sec]
                messages.append('Section changed to: "{0}".'
                                .format(sec.name))
            else:
                cv.sections = []
                messages.append('Section cleared.')
        if form.organic.data != cv.organic:
            edited = True
            if form.organic.data:
                cv.organic = True
                messages.append('Set as organic.')
            else:
                cv.organic = False
                messages.append('No longer set as organic.')
        if form.taxable.data != cv.taxable:
            edited = True
            if form.taxable.data:
                cv.taxable = True
                messages.append('Set as organic.')
            else:
                cv.taxable = False
                messages.append('No longer set as taxable.')
        if form.subtitle.data != cv.subtitle:
            if form.subtitle.data:
                edited = True
                cv.subtitle = form.subtitle.data
                messages.append('Subtitle changed to: "{0}"'
                                .format(cv.subtitle))
            elif cv.subtitle:
                edited = True
                cv.subtitle = None
                messages.append('Subtitle cleared. (Default will be used.)')
        if cv.name != form.name.data:
            edited = True
            cv.name = form.name.data
            messages.append('(Short) Name changed to: "{0}".'
                            .format(cv.name))
        if form.thumbnail.data:
            edited = True
            edit_thumbnail(form.thumbnail, cv, messages)
        if not form.description.data:
            form.description.data = None
        if form.description.data != cv.description:
            edited = True
            if form.description.data:
                cv.description = form.description.data
                messages.append('Description changed to: <p>{0}</p>'
                                .format(cv.description))
            else:
                cv.description = None
                messages.append('Description cleared.')
        if form.synonyms_string.data != cv.synonyms_string:
            edited = True
            cv.synonyms_string = form.synonyms_string.data
            if form.synonyms_string.data:
                messages.append('Synonyms set to: "{0}".'
                                .format(cv.synonyms_string))
            else:
                messages.append('Synonyms cleared.')
        if set(form.gw_common_names_ids.data) != set(cv.gw_common_names_ids):
            edited = True
            cv.gw_common_names = CommonName.from_ids(
                form.gw_common_names_ids.data
            )
            if cv.gw_common_names:
                messages.append(
                    'Grows with common names: {}.'
                    .format(
                        list_to_english(c.name for c in cv.gw_common_names)
                    )
                )
            else:
                messages.append('Grows with common names cleared.')
        if set(form.gw_sections_ids.data) != set(cv.gw_sections_ids):
            edited = True
            cv.gw_sections = Section.from_ids(
                form.gw_sections_ids.data
            )
            if cv.gw_sections:
                messages.append(
                    'Grows with sections/series: {}.'
                    .format(list_to_english(s.name for s in cv.gw_sections))
                )
            else:
                messages.append('Grows with sections/series cleared.')
        if set(form.gw_cultivars_ids.data) != set(cv.gw_cultivars_ids):
            edited = True
            cv.gw_cultivars = Cultivar.from_ids(form.gw_cultivars_ids.data)
            if cv.gw_cultivars:
                messages.append(
                    'Grows with cultivars: {}.'
                    .format(
                        list_to_english(c.fullname for c in cv.gw_cultivars)
                    )
                )
            else:
                messages.append('Grows with cultivars cleared.')
        if old_cn is cv.common_name and old_parent_sec is cv.parent_section:
            pc = cv.parent_collection
            cv_index = pc.index(cv)
            if form.pos.data == -1 and cv_index != 0:
                edited = True
                pc.insert(0, pc.pop(cv_index))
                messages.append(
                    'Will now be listed first in its parent container.'
                )
            elif (form.pos.data != -1 and
                    (cv_index == 0 or form.pos.data != pc[cv_index - 1].id)):
                edited = True
                prev = next(cv for cv in pc if cv.id == form.pos.data)
                cv.move_after(prev)
                messages.append('Will now be listed after "{0}".'
                                .format(prev.fullname))

        if (not form.new_until.data or
                form.new_until.data <= datetime.date.today()):
            form.new_until.data = None
        if form.new_until.data != cv.new_until:
            edited = True
            if not form.new_until.data:
                cv.new_until = None
                messages.append('No longer marked as new.')
            else:
                cv.new_until = form.new_until.data
                messages.append('Marked as new until {0}.'
                                .format(cv.new_until.strftime('%m/%d/%Y')))
        if form.featured.data and not cv.featured:
            edited = True
            cv.featured = True
            messages.append('"{0}" will now be featured on its common '
                            'name\'s page.'.format(cv.fullname))
        elif not form.featured.data and cv.featured:
            edited = True
            cv.featured = False
            messages.append('"{0}" will no longer be featured on its common '
                            'name\'s page.'.format(cv.fullname))

        if form.in_stock.data and not cv.in_stock:
            edited = True
            cv.in_stock = True
            messages.append('"{0}" is now in stock.'.format(cv.fullname))
        elif not form.in_stock.data and cv.in_stock:
            edited = True
            cv.in_stock = False
            messages.append('"{0}" is now out of stock.'
                            .format(cv.fullname))
        if form.active.data and not cv.active:
            edited = True
            cv.active = True
            messages.append('"{0}" is now active.'.format(cv.fullname))
        elif not form.active.data and cv.active:
            edited = True
            cv.active = False
            messages.append('"{0}" is no longer active.'
                            .format(cv.fullname))
        if form.visible.data and not cv.visible:
            edited = True
            cv.visible = True
            messages.append('"{0}" will now be visible on '
                            'auto-generated pages.'.format(cv.fullname))
        elif not form.visible.data and cv.visible:
            edited = True
            cv.visible = False
            messages.append('"{0}" will no longer be visible on '
                            'auto-generated pages.'.format(cv.fullname))
        if edited:
            messages.append('Changes to "{0}" committed to the database.'
                            .format(cv.fullname))
            db.session.commit()
            flash_all(messages)
            if (old_slugs['cv'] != cv.slug or
                    old_slugs['cn'] != cv.common_name.slug or
                    old_slugs['idx'] != cv.common_name.index.slug):
                try:
                    warnings.append(redirect_cultivar_warning(
                        cv,
                        old_idx_slug=old_slugs['idx'],
                        old_cn_slug=old_slugs['cn'],
                        old_cv_slug=old_slugs['cv'],
                        new_idx_slug=cv.common_name.index.slug,
                        new_cn_slug=cv.common_name.slug,
                        new_cv_slug=cv.slug
                    ))
                except NotEnabledError:
                    pass
            if warnings:
                flash_all(warnings)
            return redirect(url_for('seeds.manage'))
        else:
            messages.append('No changes to "{0}" were made'
                            .format(cv.fullname))
            flash_all(messages)
            return redirect(url_for('seeds.edit_cultivar', cv_id=cv_id))
    crumbs = cblr.crumble_route_group('edit_cultivar', EDIT_ROUTES)
    return render_template('seeds/edit_cultivar.html',
                           crumbs=crumbs,
                           form=form,
                           cultivar=cv)


@seeds.route('/edit_packet', methods=['GET', 'POST'])
@seeds.route('/edit_packet/<int:pkt_id>', methods=['GET', 'POST'])
@login_required
@permission_required(Permission.MANAGE_SEEDS)
def edit_packet(pkt_id=None):
    packet = Packet.query.get(pkt_id) if pkt_id else None
    if packet is None:
        return redirect(url_for('seeds.select_packet',
                                dest='seeds.edit_packet'))
    form = EditPacketForm(obj=packet)
    if form.validate_on_submit():
        edited = False
        messages = []
        messages.append('Editing packet "{0}".'.format(packet.info))
        if form.cultivar_id.data != packet.cultivar_id:
            edited = True
            packet.cultivar = Cultivar.query.get(form.cultivar_id.data)
            messages.append('Cultivar changed to: "{0}".'
                            .format(packet.cultivar.fullname))
        form.sku.data = form.sku.data.strip()
        if form.sku.data != packet.sku:
            edited = True
            packet.sku = form.sku.data
            messages.append('SKU changed to: "{0}".'.format(packet.sku))
        dec_p = USDollar.usd_to_decimal(form.price.data)
        if dec_p != packet.price:
            edited = True
            packet.price = dec_p
            messages.append('Price set to: "${0}".'.format(packet.price))
        #TODO: Amount
        if edited:
            db.session.commit()
            messages.append('Changes to "{0}" committed to the database.'
                            .format(packet.info))
            flash_all(messages)
            return redirect(url_for('seeds.manage'))
        else:
            messages.append('No changes to "{0}" were made.'
                            .format(packet.info))
            flash_all(messages)
            return redirect(url_for('seeds.edit_packet', pkt_id=pkt_id))
    crumbs = cblr.crumble_route_group('edit_packet', EDIT_ROUTES)
    return render_template('seeds/edit_packet.html',
                           crumbs=crumbs,
                           form=form)


def migrate_cultivars(cn, other):
    """Move all instances of `Cultivar` from one `CommonName` to another.

    Note:
        This doesn't actually move them, it just adds them to the other side

    Attributes:
        cn: The `CommonName` to move `Cultivar` instances from.
        other: The `CommonName` to move the cultivars to.
    """
    warnings = []
    for cv in list(cn.cultivars):
        if cv.name_with_section not in [c.name_with_section for c in
                                        other.cultivars]:
            other.cultivars.append(cv)
        else:
            warnings.append(
                'Could not move "{0}" because a cultivar with the same name '
                'and section already exists! Click <a href="{1}">here</a> if '
                'you want to edit it, or <a href="{2}">here</a> if you want '
                'to remove it.'
                .format(cv.fullname,
                        url_for('seeds.edit_cultivar', cv_id=cv.id),
                        url_for('seeds.remove_cultivar', cv_id=cv.id))
            )
    return warnings


def migrate_common_names(idx, other):
    """Move all instances of `CommonName` from one `Index` to another.

    Attributes:
        idx: The `Index` to move `CommonName` instances from.
        other: The `Index` to move the common names to.
    """
    warnings = []
    for cn in list(idx.common_names):
        other_cns = [c.name for c in other.common_names]
        if cn.name not in other_cns:
            other.common_names.append(cn)
        else:
            warnings.append(
                'Could not move "{0}" because a common name with the same '
                'name already belongs to "{1}". Instead of moving it, its '
                'children (section, and cultivars) will be '
                'moved to the one belonging to "{1}" if possible.'
                .format(cn.name, other.name)
            )
            other_cn = next((
                c for c in other.common_names if c.name == cn.name), None
            )
            warnings += migrate_sections(cn, other_cn)
            warnings += migrate_cultivars(cn, other_cn)
    return warnings


def migrate_sections(cn, other):
    """Move all instances of `Section` from one `CommonName` to another.

    Attributes:
        cn: The `CommonName` to move `Section` instances from.
        other: The `CommonName` to move the section to.
    """
    warnings = []
    for sec in cn.sections:
        if sec.name not in [s.name for s in other.section]:
            other.section.append(sec)
        else:
            warnings.append(
                'Could not move "{0}" because a section with the same name '
                'already belongs to "{1}". Click <a href="{2}">here</a> if '
                'you would like to edit "{0}", or <a href="{3}">here</a> '
                'if you would like to remove it.'
                .format(sec.name,
                        other.name,
                        url_for('seeds.edit_section', section_id=sec.id),
                        url_for('seeds.remove_section', section_id=sec.id))
            )
    return warnings


@seeds.route('/remove_index', methods=['GET', 'POST'])
@seeds.route('/remove_index/<int:idx_id>', methods=['GET', 'POST'])
@login_required
@permission_required(Permission.MANAGE_SEEDS)
def remove_index(idx_id=None):
    """Remove an index from the database."""
    index = Index.query.get(idx_id) if idx_id else None
    if index is None:
        return redirect(url_for('seeds.select_index',
                                dest='seeds.remove_index'))
    if Index.query.count() == 1:
        flash('Error: Cannot remove the index "{0}" without another index '
              'existing to move its children to! Please add an index so you '
              'can move {0}\'s children to it.'
              .format(index.name), 'error')
        return redirect(url_for('seeds.add_index'))
    form = RemoveIndexForm(index=index)
    if form.validate_on_submit():
        messages = []
        warnings = []
        if form.verify_removal.data:
            messages.append('Removing index "{0}":'.format(index.name))
            new_index = Index.query.get(form.move_to.data)
            warnings += redirect_index_warnings(index,
                                                old_idx_slug=index.slug,
                                                new_idx_slug=new_index.slug)
            # This needs to come after redirect warnings because SQLAlchemy
            # removes `CommonName` instances from the old `Index` when
            # appending them to the new `Index`.
            # TODO: See if there are any bugs in this due to things moving
            # after redirect warnings are given.
            warnings += migrate_common_names(index, new_index)
            if index.thumbnail:
                db.session.delete(index.thumbnail)
            index.clean_positions(remove_self=True)
            db.session.delete(index)
            db.session.commit()
            messages.append('Index removed.')
            flash_all(messages)
            if warnings:
                flash_all(warnings, 'warning')
            return redirect(url_for('seeds.manage'))
        else:
            messages.append('Index was not removed, so no changes were made. '
                            'If you would like to remove it, please check the '
                            'box labeled "Yes".')
            flash_all(messages)
            return redirect(url_for('seeds.remove_index',
                                    idx_id=idx_id))
    crumbs = cblr.crumble_route_group('remove_index', REMOVE_ROUTES)
    return render_template('seeds/remove_index.html',
                           crumbs=crumbs,
                           form=form)


@seeds.route('/remove_common_name', methods=['GET', 'POST'])
@seeds.route('/remove_common_name/<int:cn_id>', methods=['GET', 'POST'])
@login_required
@permission_required(Permission.MANAGE_SEEDS)
def remove_common_name(cn_id=None):
    """Remove a common name from the database."""
    cn = CommonName.query.get(cn_id) if cn_id else None
    if cn is None:
        return redirect(url_for('seeds.select_common_name',
                                dest='seeds.remove_common_name'))
    form = RemoveCommonNameForm(cn=cn)
    if form.validate_on_submit():
        messages = []
        if form.verify_removal.data:
            warnings = []
            messages.append('Removing common name "{0}":'.format(cn.name))
            new_cn = CommonName.query.get(form.move_to.data)
            if cn.synonyms:
                cn.synonyms_string = None
                messages.append('Synonyms cleared.')
            try:
                for cv in cn.cultivars:
                    warnings.append(redirect_cultivar_warning(
                        cv,
                        old_cn_slug=cn.slug,
                        new_cn_slug=new_cn.slug
                    ))
            except NotEnabledError:
                pass
            warnings += migrate_cultivars(cn, new_cn)
            if cn.thumbnail:
                db.session.delete(cn.thumbnail)
            cn.index.common_names.remove(cn)  # Sets idx_pos for remaining.
            db.session.delete(cn)
            db.session.commit()
            messages.append('Common name removed.')
            flash_all(messages)
            if warnings:
                flash_all(warnings)
            return redirect(url_for('seeds.manage'))
        else:
            messages.append('Common name was not removed, so no changes '
                            'were made. If you would like to remove it, '
                            'please check the box labeled "Yes".')
            flash_all(messages)
            return redirect(url_for('seeds.remove_common_name', cn_id=cn_id))
    crumbs = cblr.crumble_route_group('remove_common_name', REMOVE_ROUTES)
    return render_template('seeds/remove_common_name.html',
                           crumbs=crumbs,
                           form=form)


@seeds.route('/remove_section', methods=['GET', 'POST'])
@seeds.route('/remove_section/<section_id>', methods=['GET', 'POST'])
@login_required
@permission_required(Permission.MANAGE_SEEDS)
def remove_section(section_id=None):
    """Display page for removing section from database."""
    section = Section.query.get(section_id) if section_id else None
    if section is None:
        return redirect(url_for('seeds.select_section',
                                dest='seeds.remove_section'))
    form = RemoveSectionForm()
    if form.validate_on_submit():
        messages = []
        if form.verify_removal.data:
            warnings = []
            messages.append('Removing section "{0}":'.format(section.name))
            db.session.delete(section)
            db.session.commit()
            messages.append('Section removed.')
            flash_all(messages)
            if warnings:
                flash_all(warnings, 'warning')
            return redirect(url_for('seeds.manage'))
        else:
            messages.append('Section was not removed, so no changes were '
                            'made. If you would like to remove it, please '
                            'check the box labeled "Yes".')
            flash_all(messages)
            return redirect(url_for('seeds.remove_section',
                                    section_id=section_id))
    crumbs = cblr.crumble_route_group('remove_section', REMOVE_ROUTES)
    return render_template('seeds/remove_section.html',
                           crumbs=crumbs,
                           form=form,
                           section=section)


@seeds.route('/remove_cultivar', methods=['GET', 'POST'])
@seeds.route('/remove_cultivar/<int:cv_id>', methods=['GET', 'POST'])
@login_required
@permission_required(Permission.MANAGE_SEEDS)
def remove_cultivar(cv_id=None):
    cv = Cultivar.query.get(cv_id) if cv_id else None
    if cv is None:
        return redirect(url_for('seeds.select_cultivar',
                                dest='seeds.remove_cultivar'))
    form = RemoveCultivarForm()
    if form.validate_on_submit():
        messages = []
        if form.verify_removal.data:
            warnings = []
            messages.append('Removing cultivar "{0}":'.format(cv.fullname))
            if cv.synonyms:
                cv.synonyms_string = None
                messages.append('Synonyms cleared.')
            if form.delete_images.data:
                if cv.thumbnail:
                    if (not cv.thumbnail.cultivars or
                            cv.thumbnail.cultivars == [cv]):
                        messages.append('Thumbnail image file "{0}" deleted.'
                                        .format(cv.thumbnail.filename))
                        db.session.delete(cv.thumbnail)
                    else:
                        messages.append('Thumbnail image file "{0}" was not '
                                        'deleted because it is in use by '
                                        'other cultivars.')
                if cv.images:
                    for img in cv.images:
                        if (img.cultivars == [cv] and
                                cv not in img.cultivars_with_thumb):
                            messages.append('Image file "{0}" associated '
                                            'with "{1}" has been deleted. '
                                            .format(img.filename, cv.fullname))
                            db.session.delete(img)
            old_path = url_for('seeds.cultivar',
                               idx_slug=cv.common_name.index.slug,
                               cn_slug=cv.common_name.slug,
                               cv_slug=cv.slug)
            warnings.append(
                'Warning: the path "{0}" is no longer valid. <a '
                'href="{1}" target="_blank">Click here</a> if you wish to'
                'add a redirect for it.'
                .format(old_path,
                        url_for('seeds.add_redirect',
                                old_path=old_path,
                                status_code=301))
            )
            db.session.delete(cv)
            db.session.commit()
            messages.append('Cultivar removed.')
            flash_all(messages)
            if warnings:
                flash_all(warnings, 'warning')
            return redirect(url_for('seeds.manage'))
        else:
            messages.append('Cultivar was not removed, so no changes '
                            'were made. If you would like to remove it, '
                            'please check the box labeled "Yes".')
            flash_all(messages)
            return redirect(url_for('seeds.remove_cultivar', cv_id=cv.id))
    crumbs = cblr.crumble_route_group('remove_cultivar', REMOVE_ROUTES)
    return render_template('seeds/remove_cultivar.html',
                           crumbs=crumbs,
                           form=form,
                           cultivar=cv)


@seeds.route('/remove_packet', methods=['GET', 'POST'])
@seeds.route('/remove_packet/<int:pkt_id>', methods=['GET', 'POST'])
@login_required
@permission_required(Permission.MANAGE_SEEDS)
def remove_packet(pkt_id=None):
    """Remove a packet from the database."""
    packet = Packet.query.get(pkt_id) if pkt_id else None
    if packet is None:
        return redirect(url_for('seeds.select_packet',
                                dest='seeds.remove_packet'))
    form = RemovePacketForm()
    if form.validate_on_submit():
        messages = []
        if form.verify_removal.data:
            db.session.delete(packet)
            db.session.commit()
            messages.append('Packet removed.')
            flash_all(messages)
            return redirect(url_for('seeds.manage'))
        else:
            messages.append('Packet was not removed, so no changes '
                            'were made. If you would like to remove it, '
                            'please check the box labeled "Yes".')
            flash_all(messages)
            return redirect(url_for('seeds.remove_packet', pkt_id=pkt_id))
    crumbs = cblr.crumble_route_group('remove_packet', REMOVE_ROUTES)
    return render_template('seeds/remove_packet.html',
                           crumbs=crumbs,
                           form=form,
                           packet=packet)


@seeds.route('/select_index', methods=['GET', 'POST'])
@login_required
@permission_required(Permission.MANAGE_SEEDS)
def select_index():
    """Select an index to load on another page.

    Request Args:
        dest: The route to redirect to after `Index` is selected.
    """
    dest = request.args.get('dest')
    if dest is None:
        flash('Error: No destination page was specified!', 'error')
        return redirect(url_for('seeds.manage'))
    form = SelectIndexForm()
    if form.validate_on_submit():
        return redirect(url_for(dest, idx_id=form.index.data))
    crumbs = (
        cblr.crumble('manage', 'Manage Seeds'),
        cblr.crumble('select_index', dest=dest)
    )
    return render_template('seeds/select_index.html',
                           crumbs=crumbs,
                           form=form)


@seeds.route('/select_common_name', methods=['GET', 'POST'])
@login_required
@permission_required(Permission.MANAGE_SEEDS)
def select_common_name():
    """Select a common name to load on another page.

    Request Args:
        dest: The route to redirect to after `Index` is selected.
    """
    dest = request.args.get('dest')
    if dest is None:
        flash('Error: No destination page was specified!')
        return redirect(url_for('seeds.manage'))
    form = SelectCommonNameForm()
    if form.validate_on_submit():
        return redirect(url_for(dest, cn_id=form.common_name.data))
    crumbs = (
        cblr.crumble('manage', 'Manage Seeds'),
        cblr.crumble('select_common_name', dest=dest)
    )
    return render_template('seeds/select_common_name.html',
                           crumbs=crumbs,
                           form=form)


@seeds.route('/select_section', methods=['GET', 'POST'])
@login_required
@permission_required(Permission.MANAGE_SEEDS)
def select_section():
    """Select a section to load on another page.

    Request Args:
        dest: The route to redirect to after `Section` is selected.
    """
    dest = request.args.get('dest')
    if dest is None:
        flash('Error: No destination page was specified!')
        return redirect(url_for('seeds.manage'))
    form = SelectSectionForm()
    if form.validate_on_submit():
        return redirect(url_for(dest, section_id=form.section.data))
    crumbs = (
        cblr.crumble('manage', 'Manage Seeds'),
        cblr.crumble('select_section', dest=dest)
    )
    return render_template('seeds/select_section.html',
                           crumbs=crumbs,
                           form=form)


@seeds.route('/select_cultivar', methods=['GET', 'POST'])
@login_required
@permission_required(Permission.MANAGE_SEEDS)
def select_cultivar():
    """Select a cultivar to load on another page.

    Request Args:
        dest: The route to redirect after `Cultivar` is selected.
    """
    dest = request.args.get('dest')
    if dest is None:
        flash('Error: No destination page was specified!')
        return redirect(url_for('seeds.manage'))
    form = SelectCultivarForm()
    if form.validate_on_submit():
        return redirect(url_for(dest, cv_id=form.cultivar.data))
    crumbs = (
        cblr.crumble('manage', 'Manage Seeds'),
        cblr.crumble('select_cultivar', dest=dest)
    )
    return render_template('seeds/select_cultivar.html',
                           crumbs=crumbs,
                           form=form)


@seeds.route('/select_packet', methods=['GET', 'POST'])
@login_required
@permission_required(Permission.MANAGE_SEEDS)
def select_packet():
    """Select a packet to load on another page.

    Request Args:
        dest: The route to redirect to after `Packet` is selected.
    """
    dest = request.args.get('dest')
    if dest is None:
        flash('Error: No destination page was specified!')
        return redirect(url_for('seeds.manage'))
    form = SelectPacketForm()
    if form.validate_on_submit():
        return redirect(url_for(dest, pkt_id=form.packet.data))
    crumbs = (
        cblr.crumble('manage', 'Manage Seeds'),
        cblr.crumble('select_packet', dest=dest)
    )
    return render_template('seeds/select_packet.html',
                           crumbs=crumbs,
                           form=form)


@seeds.route('/manage')
@login_required
@permission_required(Permission.MANAGE_SEEDS)
def manage():
    pending = Pending(current_app.config.get('PENDING_FILE'))
    lc = LastCommit()
    if pending.exists():
        pending.load()
    return render_template('seeds/manage.html', pending=pending, lc=lc)


@seeds.route('/<idx_slug>')
def index(idx_slug=None):
    """Display an `Index`."""
    index = Index.query.filter_by(slug=idx_slug).one_or_none()
    if index is not None:
        crumbs = (
            cblr.crumble('home', 'Home'),
            cblr.crumble('index', index.header, idx_slug=index.slug)
        )
        return render_template('seeds/index.html',
                               crumbs=crumbs,
                               index=index)
    else:
        abort(404)


@seeds.route('/<idx_slug>/<cn_slug>.html')
def common_name(idx_slug=None, cn_slug=None):
    """Display page for a common name."""
    cn = CommonName.query\
        .join(Index, Index.id == CommonName.index_id)\
        .filter(CommonName.slug == cn_slug, Index.slug == idx_slug)\
        .one_or_none()
    if cn is not None:
        individuals = cn.child_cultivars
        count = len([cv for cv in cn.cultivars if cv.public])
        crumbs = (
            cblr.crumble('home', 'Home'),
            cblr.crumble('index', cn.index.header, idx_slug=idx_slug),
            cn.name
        )
        featured = [c for c in cn.cultivars if c.featured]
        # TMP
        print(cn.name)
        print('Total cultivars: {0}'.format(len(cn.cultivars)))
        print('Active cultivars: {0}'.format(len([(c for c in cn.cultivars
                                                   if c.active)])))
        print('In stock cultivars: {0}'.format(len([(c for c in cn.cultivars
                                                     if c.in_stock)])))
        return render_template('seeds/common_name.html',
                               featured=featured,
                               individuals=individuals,
                               cn=cn,
                               count=count,
                               crumbs=crumbs)
    else:
        abort(404)


@seeds.route('/<idx_slug>/<cn_slug>/<cv_slug>.html')
def cultivar(idx_slug=None, cn_slug=None, cv_slug=None):
    """Display a page for a given cultivar."""
    if idx_slug and cn_slug and cv_slug:
        cv = Cultivar.query\
            .join(CommonName, CommonName.id == Cultivar.common_name_id)\
            .join(Index, Index.id == CommonName.index_id)\
            .filter(Index.slug == idx_slug,
                    CommonName.slug == cn_slug,
                    Cultivar.slug == cv_slug)\
            .one_or_none()
        if cv and current_app.config.get('SHOW_CULTIVAR_PAGES'):
            # TODO: Breadcrumbs
            return render_template('seeds/cultivar.html',
                                   idx_slug=idx_slug,
                                   cn_slug=cn_slug,
                                   # crumbs=crumbs,
                                   cultivar=cv)
    abort(404)


@seeds.route('/flip_cultivar_bool/<int:cv_id>/<attr>')
@permission_required(Permission.MANAGE_SEEDS)
def flip_cultivar_bool(cv_id, attr):
    """Toggle a boolean attribute of a `Cultivar`."""
    cv = Cultivar.query.get(cv_id)
    if cv is None:
        abort(404)
    cv[attr] = not cv[attr]
    if cv[attr]:
        flash('"{}" is now set as {}.'.format(cv.fullname, attr))
    else:
        flash('"{}" is no longer set as {}.'.format(cv.fullname, attr))
    db.session.commit()
    return redirect(request.args.get('origin') or url_for('seeds.manage'))


@seeds.route('/edit_ship_date', methods=['GET', 'POST'])
@permission_required(Permission.MANAGE_SEEDS)
def edit_ship_date():
    """Edit the expected date of shipment for orders."""
    form = EditShipDateForm()
    if form.validate_on_submit():
        sd = form.ship_date.data
        current_app.jinja_env.globals['ship_date'] = format_ship_date(sd)
        ship_date = sd.strftime('%m/%d/%Y')
        with open('data/ship_date.dat', 'w', encoding='utf-8') as ofile:
            ofile.write(ship_date)
        flash('Ship date set to {}.'.format(ship_date))
        return redirect(request.args.get('origin') or url_for('seeds.manage'))
    return render_template('seeds/edit_ship_date.html', form=form)


# Functions and views for moving objects in ordering_list collections.
def move_object(cls, obj_id, delta):
    """Move a movable object (in an `ordering_list`) <delta> positions.

    Args:
        cls: The class (db model) of the object to move.
        obj_id: The id (primary key) of the object to move.
        delta: The number of positions to move; positive for forward, negative
            for backward.
    """
    delta = int(delta)  # Flask's int converter doesn't handle negatives.
    obj = cls.query.get(obj_id)
    if obj is None:
        abort(404)
    if obj.move(delta):
        db.session.commit()
        flash('"{0}" has been moved {1} {2} position{3}.'
              .format(obj.name,
                      'forward' if delta > 0 else 'backward',
                      abs(delta),
                      's' if abs(delta) > 1 else ''))
    else:
        if delta < 0:
            flash('"{0}" is already first.'.format(obj.name))
        else:
            flash('"{0}" is already last.'.format(obj.name))
    return redirect(request.args.get('origin') or url_for('seeds.manage'))


@seeds.route('/move_common_name/<int:cn_id>/<delta>')
@permission_required(Permission.MANAGE_SEEDS)
def move_common_name(cn_id, delta):
    """Move a common name <delta> positions in its index."""
    return move_object(CommonName, cn_id, delta)


@seeds.route('/move_section/<int:section_id>/<delta>')
@permission_required(Permission.MANAGE_SEEDS)
def move_section(section_id, delta):
    """Move a section <delta> positions in its parent container."""
    return move_object(Section, section_id, delta)


@seeds.route('/move_cultivar/<int:cv_id>/<delta>')
@permission_required(Permission.MANAGE_SEEDS)
def move_cultivar(cv_id, delta):
    """Move a cultivar <delta> positions in its parent container."""
    return move_object(Cultivar, cv_id, delta)
