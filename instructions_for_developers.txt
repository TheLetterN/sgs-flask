Instructions and Tips for Developers of the Flask Version of the SGS Website

Last modified: 2015 April 21

SETUP:
------

In order to test the website, you will need to set up and use a Python virtual
environment to run the website and install and run the needed libraries and
extensions. 
You will need to perform most of these actions in a terminal (Terminal.app on 
a Mac); for the sake of clarity, all terminal commands will be indented.

1) To create a virtual environment, first check that you have virtualenv
installed:

	virtualenv -h

1.1) If this shows you the help information for virtualenv, virtualenv is
installed, and you can skip ahead to step 2. If you get an error saying 
virtualenv couldn't be found, you will need to install it:

	sudo easy_install virtualenv

Enter your password when prompted, and virtualenv should be installed on your
computer. (Repeat step one to double-check if you saw any errors while
installing virtualenv.)

2) Enter the directory of the sgs_flask project:

	cd /path/to/sgs_flask

For example, if you put it in your Documents folder, you would run:
	
	cd ~/Documents/sgs_flask

3) Create a virtual environment named flask within the sgs_flask directory:

	virtualenv flask 

This will install a virtual environment for Python such that, when properly
used, you won't have to worry about anything you install affecting anything
on your system outside of the sgs_flask directory.

4) Activate your virtual environment:

	source /path/to/sgs_flask/flask/bin/activate

!IMPORTANT!: Remember this command, you will need to use it to activate the
virtual environment if it has been deactivated (either by running 
/path/to/sgs_flask/bin/deactivate or closing your terminal window)  before 
running any files in sgs_flask, otherwise the website will try to use your 
system's version of Python instead of the virtual environment! It won't make
your computer burst into flames, but it won't work, either!

5) Install the required libraries via pip:

	pip install flask

Congratulations, you now have everything you need to work on the site!

USE:
----

1) First, always make sure you've activated the flask environment before trying to
run the website or any of its associated scripts:

	source path/to/sgs_flask/flask/bin/activate

(Note: You don't have to use the full path; if you have already used cd to
enter the sgs_flask directory in your terminal, you can just use:
	
	source flask/bin/activate

If this seems at all confusing, though, using the full path never hurts. TIP:
you can usually use the tab key to auto-complete file and directory names you
have already started typing in the terminal. For example:

	cd /path/to/sgs_
becomes:
	cd /path/to/sgs_flask/
when you hit tab, assuming there's no other directory or file starting with
"sgs_" in the directory that contains sgs_flask.

2) Next, you need to make sure your local version of the website is up-to-date!
To do so:
	
	git pull origin master

Enter your password if prompted (the one you use to log in to the NAS) and it
should synchronize your files with the ones on the server. If that completes
without error, you have the latest version of the project!

3) Whenever you change or add files, they will not be part of the project
(in our case, the website) until you add them, including files that were
already in the project before you modified them! You don't need to add them
right away (nor should you) but you will need to add them once you are ready
to commit your changes to the project. To see what files need to be added:

	git status

Any files listed under "Changes not staged for commit:" or "Untracked files:"
still need to be added to the forthcoming project commit. To do so:
	
	git add <filename>

You can also use git add * to add all files, but this might add files not
intended to be part of the project (such as Apple's auto-generated .DS_store
files) so I recommend explicitly adding files instead.

4) Once you've added all the changed files--you can check the project status
again with 'git status'; everything ready for the commit will be listed under
"Changes to be committed:"--you are ready to commit your changes. To do so:

	git commit -m "<a message explaining the changes you made>"

Please try to include any information you think the other developers would
need to know about the changes you made.

5) Great, you're committed! You're not done yet, though! You've committed
your changes to your own local repository, but the repository on the server is
still the same as it was before you started. You'll need to push your changes
to the server. First, make sure the server's version hasn't been updated while
you were working (repeat USE: step 2: git pull origin master) and if it hasn't,
you're ready to push your changes to it:

	git push origin master

If nothing goes wrong (and you enter your password as prompted) the server
will be updated with your changes, so now everyone can see them and wonder
what the heck you were thinking when you made them!

This covers the basics of setting up and maintaining this project. More will
likely come later as the need arises. 
